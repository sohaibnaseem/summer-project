{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red50\green98\blue178;}
\margl1440\margr1440\vieww28300\viewh15480\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
Mininet Examples\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
These examples are intended to help you get started using Mininet's Python API.\
\pard\pardeftab720

\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
baresshd.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example uses Mininet's medium-level API to create an sshd process running in a namespace. Doesn't use OpenFlow.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
bind.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how you can create private directories for each node in a Mininet topology.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
cluster.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example contains all of the code for experimental cluster edition. Remote classes and MininetCluster can be imported from here to create a topology with nodes on remote machines.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
clusterSanity.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example runs cluster edition locally as a sanity check to test basic functionality.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
clustercli.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example contains a CLI for experimental cluster edition.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
clusterdemo.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example is a basic demo of cluster edition on 3 servers with a tree topology of depth 3 and fanout 3.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
consoles.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example creates a grid of console windows, one for each node, and allows interaction with and monitoring of each console, including graphical monitoring.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
controllers.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example creates a network with multiple controllers, by using a custom 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
Switch()
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
 subclass.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
controllers2.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example creates a network with multiple controllers by creating an empty network, adding nodes to it, and manually starting the switches.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
controlnet.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This examples shows how you can model the control network as well as the data network, by actually creating two Mininet objects.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
cpu.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example tests iperf bandwidth for varying CPU limits.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
emptynet.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates creating an empty network (i.e. with no topology object) and adding nodes to it.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
hwintf.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how to add an interface (for example a real hardware interface) to a network after the network is created.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
intfoptions.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example reconfigures a TCIntf during runtime with different traffic control commands to test bandwidth, loss, and delay.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
limit.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how to use link and CPU limits.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
linearbandwidth.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how to create a custom topology programatically by subclassing Topo, and how to run a series of tests on it.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
linuxrouter.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how to create and configure a router in Mininet that uses Linux IP forwarding.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
miniedit.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates creating a network via a graphical editor.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
mobility.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates detaching an interface from one switch and attaching it another as a basic way to move a host around a network.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
multiLink.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates the creation of multiple links between nodes using a custom Topology class.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
multiping.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates one method for monitoring output from multiple hosts, using 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
node.monitor()
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
multipoll.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates monitoring output files from multiple hosts.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
multitest.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example creates a network and runs multiple tests on it.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
nat.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how to connect a Mininet network to the Internet using NAT. It also answers the eternal question "why can't I ping 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
google.com
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
?"\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
natnet.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates how to create a network using a NAT node to connect hosts to the internet.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
numberedports.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example verifies the mininet ofport numbers match up to the ovs port numbers. It also verifies that the port numbers match up to the interface numbers\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
popen.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example monitors a number of hosts using 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
host.popen()
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
 and 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
pmonitor()
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
popenpoll.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example demonstrates monitoring output from multiple hosts using the 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
node.popen()
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
 interface (which returns 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
Popen
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
 objects) and 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
pmonitor()
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
scratchnet.py, scratchnetuser.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
These two examples demonstrate how to create a network by using the lowest- level Mininet functions. Generally the higher-level API is easier to use, but scratchnet shows what is going on behind the scenes.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
simpleperf.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
A simple example of configuring network and CPU bandwidth limits.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
sshd.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example shows how to run an 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
sshd
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
 process in each host, allowing you to log in via 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
ssh
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
. This requires connecting the Mininet data network to an interface in the root namespace (generaly the control network already lives in the root namespace, so it does not need to be explicitly connected.)\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
tree1024.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example attempts to create a 1024-host network, and then runs the CLI on it. It may run into scalability limits, depending on available memory and 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
sysctl
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
 configuration (see 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
INSTALL
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
.)\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
treeping64.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
This example creates a 64-host tree network, and attempts to check full connectivity using 
\f1\fs28 \cf2 \cb0 \expnd0\expndtw0\kerning0
ping
\f0\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
, for different switch/datapath types.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
vlanhost.py:\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
An example of how to subclass Host to use a VLAN on its primary interface.}